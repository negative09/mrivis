# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *
# mrivis_collage.m

    
@function
def mrivis_collage(img_spec=None,fig_handle=None,rescale_intensity_range=None,varargin=None,*args,**kwargs):
    varargin = mrivis_collage.varargin
    nargin = mrivis_collage.nargin

    # mrivis_collage( img, fig_handle)
#   img  = MR image to be visualized
#   fig_handle = figure handle to display the images
#   scale_intensity_flag - whether to rescale image intensities or not
#       can be a flag ([true]/false)
#       or an array specifying the [ min max ] to which intensities should be rescaled to
#       - This useful for comparison purposes:
#           when images being visualized is exactly what you wanna see and not the rescaled ones
#   varargin: optional text to be displayed
    
    # setting arguments
    if nargin < 2:
        fig_handle=copy(figure)
# mrivis_collage.m:14
    
    if nargin < 3:
        rescale_intensity_range=copy(true)
# mrivis_collage.m:18
    
    # reading in data
    if ischar(img_spec):
        img_vol=MRIread(img_spec)
# mrivis_collage.m:23
        if numel(size(img_vol.vol)) != 3:
            error('Input volume is not 3D!')
        img=img_vol.vol
# mrivis_collage.m:27
    else:
        if isreal(img_spec):
            if numel(size(img_spec)) != 3:
                error('Input volume is not 3D!')
            img=copy(img_spec)
# mrivis_collage.m:32
        else:
            display('Invalid input specified. Input either a path to image data, or provide 3d Matrix directly.')
    
    # cropping the image to its extents
    padding=5
# mrivis_collage.m:38
    coords(arange(),1),coords[:,2],coords[:,3]=ind2sub(size(img),find(img > 0),nargout=3)
# mrivis_collage.m:39
    beg_coords=max(1,min(coords) - padding)
# mrivis_collage.m:40
    end_coords=min(size(img),max(coords) + padding)
# mrivis_collage.m:41
    img=img[beg_coords[1]:end_coords[1],beg_coords[2]:end_coords[2],beg_coords[3]:end_coords[3]]
# mrivis_collage.m:42
    num_cross_sections=11
# mrivis_collage.m:44
    slices=cellarray([[round(linspace(1,size(img,1),num_cross_sections))],[round(linspace(1,size(img,2),num_cross_sections))],[round(linspace(1,size(img,3),num_cross_sections))]])
# mrivis_collage.m:45
    # by default
    RescaleImages=copy(true)
# mrivis_collage.m:53
    # estimating intensity ranges
    if length(rescale_intensity_range) == 1 and rescale_intensity_range:
        img_intensity_range=matlabarray(cat(min(ravel(img)),max(ravel(img))))
# mrivis_collage.m:57
    else:
        if length(rescale_intensity_range) == 2:
            img_intensity_range=copy(rescale_intensity_range)
# mrivis_collage.m:59
        else:
            RescaleImages=copy(false)
# mrivis_collage.m:61
    
    set(0,'CurrentFigure',fig_handle)
    set(fig_handle,'Color','k')
    for dim_index in arange(1,3).reshape(-1):
        for range_index in arange(2,num_cross_sections - 1).reshape(-1):
            # making the axis
            subplot('Position',get_subplot_pos(dim_index,range_index))
            slice=getdim(img,dim_index,slices[dim_index](range_index))
# mrivis_collage.m:74
            if RescaleImages:
                imagesc(slice,img_intensity_range)
            else:
                imshow(slice)
            # adjustments for proper presentation
            colormap('gray')
            axis('off')
            axis('image')
    
    # displaying some annotation text if provided
# good choice would be the location of the input image (for future reference when image is shared or misplaced!)
    if nargin > 3:
        pos_annot_path_info=matlabarray(cat(0,0.485,1,0.03))
# mrivis_collage.m:93
        subplot('Position',pos_annot_path_info,'Color','k')
        axis('off')
        text(0.05,0.5,varargin[1],'Interpreter','none','Color','g','BackgroundColor','k','fontsize',12,'horizontalAlignment','left')
    
    return
    
if __name__ == '__main__':
    pass
    
    
@function
def get_subplot_pos(dim_index=None,range_index=None,*args,**kwargs):
    varargin = get_subplot_pos.varargin
    nargin = get_subplot_pos.nargin

    # to identify the positions of the different subplots
    
    designated_base=matlabarray(cat([0,0],[0.5,0.535],[0,0.535]))
# mrivis_collage.m:107
    base=designated_base[dim_index,:]
# mrivis_collage.m:108
    # bounding box params for a 4-quad 3x3 grid
    wBB=0.16
# mrivis_collage.m:110
    hBB=0.155
# mrivis_collage.m:110
    #-# Pattern: [ 1 2 3; 4 5 6; 7 8 9]
    w=dot(mod(range_index - 2,3),wBB)
# mrivis_collage.m:112
    h=dot(abs(floor((range_index - 2) / 3) - 2),hBB)
# mrivis_collage.m:113
    pos=matlabarray(cat(base + cat(w,h),wBB,hBB - 0.005))
# mrivis_collage.m:114
    return pos
    
if __name__ == '__main__':
    pass
    